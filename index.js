(function(r,f,i,a,t,l){"use strict";const R=function(){const[e,o]=a.React.useState(l.storage.enableReadAll??!0),g=function(){l.storage.enableReadAll=!e,o(!e)};return a.React.createElement(a.ReactNative.View,{style:{flex:1,justifyContent:"center",alignItems:"center"}},a.React.createElement(a.ReactNative.Text,{style:{fontSize:16,fontWeight:"bold",marginBottom:10}},"Enable Read All Messages"),a.React.createElement(a.ReactNative.Switch,{value:e,onValueChange:g}))};let c;const h=function(){try{const e=i.findByProps("ack","markRead","message","acknowledge","messages");if(console.log("[Read All] All available message actions:",e),!e){console.error("[Read All] Failed to find any message-related actions."),t.showToast("Error: Failed to find any message-related actions.",{type:"danger"});return}if(!e?.ack&&!e?.acknowledge&&!e?.markRead){console.error("[Read All] No valid method to acknowledge messages."),t.showToast("Error: Could not find a valid method to acknowledge messages.",{type:"danger"});return}const o=i.findByProps("Guilds","GuildsList");if(!o?.Guilds){console.error("[Read All] 'Guilds' component not found in GuildsComponent:",o),t.showToast("Failed to find the server list UI.",{type:"danger"});return}l.storage.enableReadAll===void 0&&(l.storage.enableReadAll=!0),c=f.after("Guilds",o,function(g,s){let[v]=g;if(!s?.props?.children||!l.storage.enableReadAll)return s;const m=a.React.createElement(a.ReactNative.TouchableOpacity,{onPress:function(){try{const d=i.findByProps("getGuilds")?.getGuilds?.();if(!d){console.error("[Read All] No guilds found.");return}Object.values(d).forEach(function(A){const u=A.channels;u&&Object.values(u).forEach(function(n){n.is_read||(console.log(`[Read All] Marking channel ${n.id} as read.`),e?.ack?e.ack(n.id):e?.acknowledge?e.acknowledge(n.id):e?.markRead?e.markRead(n.id):(console.error("[Read All] No suitable method found to mark message as read."),t.showToast("Error: Could not find method to mark messages as read.",{type:"danger"})))})}),t.showToast("All messages marked as read!",{type:"success"})}catch(d){console.error("[Read All] Error marking messages as read:",d),t.showToast("Error marking messages as read.",{type:"danger"})}},style:{marginBottom:10,padding:10,backgroundColor:"#5865F2",borderRadius:8,alignItems:"center"}},a.React.createElement(a.ReactNative.Text,{style:{color:"#FFFFFF",fontWeight:"bold"}},"\u{1F4E9} Read All"));return s.props.children.unshift(m),s}),console.log("[Read All] Plugin loaded successfully.")}catch(e){console.error("[Read All] Plugin Load Error:",e),t.showToast("Plugin Load Failed!",{type:"danger"})}},y=function(){try{c&&(c(),t.showToast("Plugin Successfully Unloaded!",{type:"success"}))}catch(e){console.error("[Read All] Unload Error:",e),t.showToast("Error during Unload!",{type:"danger"})}},k=R;return r.onLoad=h,r.onUnload=y,r.settings=k,r})({},vendetta.patcher,vendetta.metro,vendetta.metro.common,vendetta.ui.toasts,vendetta.plugin);
