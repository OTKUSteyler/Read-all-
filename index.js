(function(u,g,o,p,a,l,r,w){"use strict";const{FormRow:h,FormSection:y,FormDivider:A,FormText:m}=w.Forms,B=function(t,n){typeof a.showToast=="function"&&(a.showToast.length>=2?a.showToast(t,{type:n}):a.showToast(t))};function C(){const[,t]=r.React.useReducer(function(e){return e+1},0),n=function(){l.storage.unreadGuildsCount=0,B("Statistics reset","success"),t()};return r.React.createElement(r.React.Fragment,null,r.React.createElement(y,{title:"Statistics"},r.React.createElement(h,{label:"Total unread guilds marked as read",trailing:l.storage.unreadGuildsCount||0}),r.React.createElement(h,{label:"Reset Statistics",subLabel:"Clear the counter for marked guilds",leading:r.React.createElement(h.Icon,{source:p.getAssetIDByName("ic_refresh_24px")}),onPress:n})),r.React.createElement(A,null),r.React.createElement(y,{title:"Information"},r.React.createElement(m,null,"The Read-all plugin adds a button to the bottom tab bar that allows you to mark all servers and DMs as read with a single tap."),r.React.createElement(m,{style:{marginTop:8}},"If you don't see the button, please try restarting Discord.")))}l.storage.unreadGuildsCount??=0;const E=o.findByProps("getGuilds","getGuild"),P=o.findByProps("getChannel","getMutablePrivateChannels"),R=o.findByProps("getUnreadCount","hasUnread"),b=o.findByProps("markGuildAsRead","markChannelAsRead"),G=o.findByProps("TabBar"),T=G?.TabBar,v=o.findByName("NavigationStack");let c,d,f=!0;function k(){try{const t=[],n=Object.values(E.getGuilds());for(const i of n)R.hasUnread(i.id)&&(t.push(i.id),b.markGuildAsRead(i.id));const e=Object.values(P.getMutablePrivateChannels());for(const i of e)R.hasUnread(i.id)&&b.markChannelAsRead(i.id);l.storage.unreadGuildsCount=(l.storage.unreadGuildsCount||0)+t.length,f&&(a.showToast(`Marked ${t.length} guilds as read`,s("success")),f=!1,setTimeout(function(){return f=!0},2e3))}catch(t){console.error("Error in markAllAsRead:",t),a.showToast("Failed to mark all as read",s("error"))}}function s(t){try{return typeof a.showToast=="function"?a.showToast.length>=2?{type:t}:{content:t}:{}}catch{return{}}}var F={onLoad:function(){try{T&&(c=g.before("render",T.prototype,function(t){const n=this;try{if(!n.props?.items?.length||!n.props.items.some(function(e){return e.id==="home"||e.id==="friends"||e.id==="nitro"}))return;if(n.props.items.findIndex(function(e){return e.id==="read-all"})===-1){const e={id:"read-all",title:"Read All",icon:p.getAssetIDByName("ic_check_24px"),onPress:k};n.props.items=[...n.props.items,e]}}catch(e){console.error("Error in TabBar patch:",e)}}),console.log("Successfully patched TabBar")),v&&!c&&(d=g.before("render",v.prototype,function(t){const n=this;try{n.props?.routes&&Array.isArray(n.props.routes)&&n.props.routes.some(function(e){return e.name==="Home"||e.name==="Friends"})&&n.props.routes.findIndex(function(e){return e.name==="ReadAll"})===-1&&n.props.routes.push({name:"ReadAll",params:{},render:function(){return null},icon:p.getAssetIDByName("ic_check_24px"),onPress:k})}catch(e){console.error("Error in NavigationStack patch:",e)}}),console.log("Using fallback NavigationStack patch")),!c&&!d?(console.error("Could not patch any navigation components"),a.showToast("Read-all plugin may not work correctly",s("warning"))):a.showToast("Read-all plugin loaded",s("success"))}catch(t){console.error("Error during plugin load:",t),a.showToast("Read-all plugin failed to load correctly",s("error"))}},onUnload:function(){c&&c(),d&&d(),a.showToast("Read-all plugin unloaded",s("info"))},settings:C};return u.default=F,Object.defineProperty(u,"__esModule",{value:!0}),u})({},vendetta.patcher,vendetta.metro,vendetta.ui.assets,vendetta.ui.toasts,vendetta.plugin,vendetta.common,vendetta.ui.components);
