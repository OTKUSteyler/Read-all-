(function(l,c,t,u,i){"use strict";function s(){const o=t.findByProps("ack","ackMessage");if(!o){console.error("[ReadAll] ERROR: ReadStateStore not found!");return}Object.keys(o.getUnreadCount()).forEach(function(n){o.ack(n)}),console.log("[ReadAll] \u2705 Marked all messages as read.")}function d(){let o=arguments.length>0&&arguments[0]!==void 0?arguments[0]:1;try{console.log(`[ReadAll] \u{1F50E} Searching for a UI component... (Attempt ${o})`);const n=t.findByProps("GuildsNav"),e=t.findByProps("NavWrapper","Sidebar"),a=t.findByProps("PrivateChannels","DMUserEntry");if(n){console.log("[ReadAll] \u{1F3AF} Found GuildsNav component!"),r(n);return}if(e){console.log("[ReadAll] \u{1F3AF} Found Sidebar component!"),r(e);return}if(a){console.log("[ReadAll] \u{1F3AF} Found PrivateChannels (DM List) component!"),r(a);return}if(o>=5){console.error("[ReadAll] \u274C ERROR: No valid UI component found. Aborting.");return}setTimeout(function(){return d(o+1)},1e3)}catch(n){console.error("[ReadAll] \u26A0\uFE0F CRITICAL ERROR:",n)}}function r(o){try{c.after("default",o,function(n,e){let[a]=n;return!e||!e.props?(console.error("[ReadAll] \u274C ERROR: UIComponent returned empty."),e):e.props.children.find(function(R){return R?.props?.id==="readall-button"})?(console.log("[ReadAll] \u23E9 Button already exists. Skipping re-injection."),e):(e.props.children=[u.React.createElement("div",{id:"readall-button",style:{padding:10,marginBottom:10}},u.React.createElement(i.Button,{onClick:s,style:{width:"100%"}},"\u2705 Mark All as Read")),...e.props.children],e)}),console.log("[ReadAll] \u2705 Button injected successfully.")}catch(n){console.error("[ReadAll] \u274C Injection failed:",n)}}var f={onLoad:function(){console.log("[ReadAll] \u{1F680} Plugin loaded! Searching for UI..."),setTimeout(function(){return d()},2e3)},onUnload:function(){console.log("[ReadAll] \u{1F6D1} Plugin unloaded!")}};return l.default=f,Object.defineProperty(l,"__esModule",{value:!0}),l})({},vendetta.patcher,vendetta.metro,vendetta.metro.common,vendetta.ui.components);
