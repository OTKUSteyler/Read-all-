(function(r,u,i,n,a,t,f){"use strict";const R=function(){const e=t.storage.enableReadAll??!0,o=function(){t.storage.enableReadAll=!e};return React.createElement(n.View,{style:{padding:16}},React.createElement(n.Text,{style:{fontSize:16,fontWeight:"bold",marginBottom:8}},"Read All Settings"),React.createElement(n.View,{style:{flexDirection:"row",alignItems:"center",marginBottom:16}},React.createElement(n.Text,{style:{flex:1}},'Enable "Read All" Functionality'),React.createElement(f.Switch,{value:e,onValueChange:o})))};let c;const h=function(){try{const e=i.findByProps("messages","acknowledge","channel","messageActions","markRead");if(console.log("[Read All] Message handlers found:",e),!e){console.error("[Read All] Failed to find any message-related properties."),a.showToast("Error: Failed to find any message-related actions.",{type:"danger"});return}if(!e?.ack&&!e?.acknowledge&&!e?.markRead){console.error("[Read All] No valid methods for message acknowledgment."),a.showToast("Error: Could not find valid method for marking messages as read.",{type:"danger"});return}const o=i.findByProps("Guilds","GuildsList");if(!o?.Guilds){console.error("[Read All] 'Guilds' component not found in GuildsComponent:",o),a.showToast("Failed to find the server list UI.",{type:"danger"});return}t.storage.enableReadAll===void 0&&(t.storage.enableReadAll=!0),c=u.after("Guilds",o,function(A,s){let[E]=A;if(!s?.props?.children||!t.storage.enableReadAll)return s;const k=n.React.createElement(n.ReactNative.TouchableOpacity,{onPress:function(){try{const d=i.findByProps("getGuilds")?.getGuilds?.();if(!d){console.error("[Read All] No guilds found.");return}Object.values(d).forEach(function(p){const g=p.channels;g&&Object.values(g).forEach(function(l){l.is_read||(console.log(`[Read All] Marking channel ${l.id} as read.`),e?.ack?e.ack(l.id):e?.acknowledge?e.acknowledge(l.id):e?.markRead?e.markRead(l.id):(console.error("[Read All] No suitable method found."),a.showToast("Error: No valid method to mark messages as read.",{type:"danger"})))})}),a.showToast("All messages marked as read!",{type:"success"})}catch(d){console.error("[Read All] Error marking messages as read:",d),a.showToast("Error marking messages as read.",{type:"danger"})}},style:{marginBottom:10,padding:10,backgroundColor:"#5865F2",borderRadius:8,alignItems:"center"}},n.React.createElement(n.ReactNative.Text,{style:{color:"#FFFFFF",fontWeight:"bold"}},"\u{1F4E9} Read All"));return s.props.children.unshift(k),s}),console.log("[Read All] Plugin loaded successfully.")}catch(e){console.error("[Read All] Plugin Load Error:",e),a.showToast("Plugin Load Failed!",{type:"danger"})}},m=function(){try{c&&(c(),a.showToast("Plugin Successfully Unloaded!",{type:"success"}))}catch(e){console.error("[Read All] Unload Error:",e),a.showToast("Error during Unload!",{type:"danger"})}},y=R;return r.onLoad=h,r.onUnload=m,r.settings=y,r})({},vendetta.patcher,vendetta.metro,vendetta.metro.common,vendetta.ui.toasts,vendetta.plugin,vendetta.ui.components);
