(function(r,h,t,a,n,l,m){"use strict";const y=function(){const e=l.storage.enableReadAll??!0,s=function(){l.storage.enableReadAll=!e};return React.createElement(a.View,{style:{padding:16}},React.createElement(a.Text,{style:{fontSize:16,fontWeight:"bold",marginBottom:8}},"Read All Settings"),React.createElement(a.View,{style:{flexDirection:"row",alignItems:"center",marginBottom:16}},React.createElement(a.Text,{style:{flex:1}},'Enable "Read All" Functionality'),React.createElement(m.Switch,{value:e,onValueChange:s})))};let u;const A=function(){try{console.log("[Read All] Searching for message-related properties...");let e=t.findByProps("ack","ackMessage","acknowledge","markRead");if(e||(e=t.findByName("MessageActions")),console.log("[Read All] Found MessageActions:",e),!e){console.error("[Read All] Failed to find message-related actions."),n.showToast("Error: Could not find message-related actions.",{type:"danger"}),Object.values(t.metro.modules).forEach(function(d){if(d?.exports){const o=Object.keys(d.exports);o.some(function(c){return c.includes("ack")||c.includes("read")||c.includes("message")})&&console.log("[Debug] Possible module found:",o)}});return}const s=e.ack||e.ackMessage||e.acknowledge||e.markRead;if(!s){console.error("[Read All] No valid function found for marking messages as read."),n.showToast("Error: No valid function found for marking messages as read.",{type:"danger"});return}console.log("[Read All] Successfully found message acknowledgment function:",s);const g=t.findByProps("Guilds","GuildsList");if(!g?.Guilds){console.error("[Read All] 'Guilds' component not found in GuildsComponent:",g),n.showToast("Failed to find the server list UI.",{type:"danger"});return}l.storage.enableReadAll===void 0&&(l.storage.enableReadAll=!0),u=h.after("Guilds",g,function(d,o){let[c]=d;if(!o?.props?.children||!l.storage.enableReadAll)return o;const k=a.React.createElement(a.ReactNative.TouchableOpacity,{onPress:function(){try{const i=t.findByProps("getGuilds")?.getGuilds?.();if(!i){console.error("[Read All] No guilds found.");return}Object.values(i).forEach(function(b){const R=b.channels;R&&Object.values(R).forEach(function(f){f.is_read||(console.log(`[Read All] Marking channel ${f.id} as read.`),s(f.id))})}),n.showToast("All messages marked as read!",{type:"success"})}catch(i){console.error("[Read All] Error marking messages as read:",i),n.showToast("Error marking messages as read.",{type:"danger"})}},style:{marginBottom:10,padding:10,backgroundColor:"#5865F2",borderRadius:8,alignItems:"center"}},a.React.createElement(a.ReactNative.Text,{style:{color:"#FFFFFF",fontWeight:"bold"}},"\u{1F4E9} Read All"));return o.props.children.unshift(k),o}),console.log("[Read All] Plugin loaded successfully.")}catch(e){console.error("[Read All] Plugin Load Error:",e),n.showToast("Plugin Load Failed!",{type:"danger"})}},p=function(){try{u&&(u(),n.showToast("Plugin Successfully Unloaded!",{type:"success"}))}catch(e){console.error("[Read All] Unload Error:",e),n.showToast("Error during Unload!",{type:"danger"})}},E=y;return r.onLoad=A,r.onUnload=p,r.settings=E,r})({},vendetta.patcher,vendetta.metro,vendetta.metro.common,vendetta.ui.toasts,vendetta.plugin,vendetta.ui.components);
